/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PostgresDataSourceView.java
 *
 * Created on Jul 19, 2010, 5:16:34 PM
 */
package com.gazoomobile.mfw.client.view;

import com.gazoomobile.mfw.client.component.MyOwnLinkButton;
import com.gazoomobile.mfw.client.database.Database;
import com.gazoomobile.mfw.client.interfaces.IDataSource;
import com.gazoomobile.mfw.connector.db.postgres.PostgresConnector;
import com.gazoomobile.mfw.platform.clientapi.Connector;
import com.gazoomobile.mfw.platform.clientapi.ConnectorDefinition;
import com.gazoomobile.mfw.platform.clientapi.ConnectorProperty;
import com.gazoomobile.mfw.platform.clientapi.ConnectorType;
import com.gazoomobile.mfw.platform.clientapi.ConnectorWebService;
import com.gazoomobile.mfw.platform.clientapi.ConnectorWebServiceImpl;
import com.gazoomobile.mfw.platform.clientapi.Datasource;
import com.gazoomobile.mfw.platform.clientapi.DatasourceWebService;
import com.gazoomobile.mfw.platform.clientapi.DatasourceWebServiceImpl;
import com.gazoomobile.mfw.platform.clientapi.MyOwnHashMap;
import com.gazoomobile.mfw.platform.clientapi.MyOwnHashMapEntry;
import com.gazoomobile.mfw.platform.clientapi.Table;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Pla
 */
public class PostgresDataSourceView extends javax.swing.JFrame implements IDataSource {

    /** Creates new form PostgresDataSourceView */
    static {
    try {
                // Create an appending file handler
                boolean append = true;
                FileHandler handler = new FileHandler("mfw_client.log",  append);
                // Add to the desired logger
                Logger logger = Logger.getLogger(PostgresDataSourceView.class.getName());
                logger.addHandler(handler);
            } catch (IOException e) { }
    }

    public PostgresDataSourceView(MainView owner, ConnectorType connectorType) {
        initComponents();
        this.owner = owner;
        this.connectorType = connectorType;
        System.out.println("ct" + connectorType.getName());

        ConnectorWebService connector = null;
        try {
            connector = new ConnectorWebServiceImpl(new URI(owner.SERVER_URL + "ConnectorService?wsdl").toURL()).getConnectorWebServiceImplPort();
        } catch (Exception ex) {
            Logger.getLogger(MyOwnLinkButton.class.getName()).log(Level.SEVERE, ex.toString());
        }
       this.connectorProperties = connector.getAllConnectorProperties(connectorType);
        for (int i = 0; i < connectorProperties.size(); i++) {
            System.out.println(connectorProperties.get(i).getName());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        nameDSField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        mf_dsName = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        nameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        portField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        databaseField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        mf_ip = new javax.swing.JLabel();
        mf_port = new javax.swing.JLabel();
        mf_database = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        userNameField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        mf_user = new javax.swing.JLabel();
        mf_password1 = new javax.swing.JLabel();
        mf_password = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("General"));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nameDSField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameDSFieldKeyPressed(evt);
            }
        });
        jPanel3.add(nameDSField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 169, -1));

        jLabel7.setText("DataSource Name:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        mf_dsName.setFont(new java.awt.Font("Arial", 0, 11));
        mf_dsName.setText("[*]");
        jPanel3.add(mf_dsName, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 20, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Database"));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameFieldKeyPressed(evt);
            }
        });
        jPanel1.add(nameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 170, -1));

        jLabel1.setText("IP/Name: ");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(67, 20, -1, -1));

        portField.setText("5432");
        portField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                portFieldKeyPressed(evt);
            }
        });
        jPanel1.add(portField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, 170, -1));

        jLabel2.setText("Port:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, -1, -1));

        databaseField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                databaseFieldKeyPressed(evt);
            }
        });
        jPanel1.add(databaseField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 170, -1));

        jLabel8.setText("Database:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, -1, -1));

        mf_ip.setFont(new java.awt.Font("Arial", 0, 11));
        mf_ip.setText("[*]");
        jPanel1.add(mf_ip, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 20, -1, -1));

        mf_port.setFont(new java.awt.Font("Arial", 0, 11));
        mf_port.setText("[*]");
        jPanel1.add(mf_port, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 60, -1, -1));

        mf_database.setFont(new java.awt.Font("Arial", 0, 11));
        mf_database.setText("[*]");
        jPanel1.add(mf_database, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 100, -1, -1));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("User"));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setText("Password: ");
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(56, 60, -1, -1));

        userNameField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userNameFieldMouseClicked(evt);
            }
        });
        userNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameFieldActionPerformed(evt);
            }
        });
        jPanel4.add(userNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 170, -1));

        jLabel3.setText("User: ");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 20, -1, -1));

        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordFieldKeyPressed(evt);
            }
        });
        jPanel4.add(passwordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, 170, -1));

        mf_user.setFont(new java.awt.Font("Arial", 0, 11));
        mf_user.setText("[*]");
        jPanel4.add(mf_user, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 20, -1, -1));

        mf_password1.setFont(new java.awt.Font("Arial", 0, 11));
        mf_password1.setText("[*]");
        jPanel4.add(mf_password1, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 60, -1, -1));

        mf_password.setFont(new java.awt.Font("Arial", 0, 11));
        mf_password.setText("[*] Mandatory field");

        jButton1.setText("Connect");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mf_password)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(17, 17, 17)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mf_password)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameDSFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameDSFieldKeyPressed
        mf_dsName.setForeground(new java.awt.Color(0, 0, 0));
}//GEN-LAST:event_nameDSFieldKeyPressed

    private void nameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameFieldKeyPressed
        mf_ip.setForeground(new java.awt.Color(0, 0, 0));
}//GEN-LAST:event_nameFieldKeyPressed

    private void portFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_portFieldKeyPressed
        mf_port.setForeground(new java.awt.Color(0, 0, 0));
}//GEN-LAST:event_portFieldKeyPressed

    private void databaseFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_databaseFieldKeyPressed
        mf_database.setForeground(new java.awt.Color(0, 0, 0));
}//GEN-LAST:event_databaseFieldKeyPressed

    private void userNameFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userNameFieldMouseClicked
        mf_user.setForeground(new java.awt.Color(0, 0, 0));
}//GEN-LAST:event_userNameFieldMouseClicked

    private void passwordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyPressed
        mf_password.setForeground(new java.awt.Color(0, 0, 0));
}//GEN-LAST:event_passwordFieldKeyPressed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked

}//GEN-LAST:event_jButton1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String dsName = nameDSField.getText();
        String dsIPName = nameField.getText();
        String dsPort = portField.getText();
        String dsUser = userNameField.getText();
        String dsPassword = new String(passwordField.getPassword());
        String dsDatabase = databaseField.getText();

        if (!dsName.equals("") && !dsIPName.equals("") && !dsPort.equals("") && !dsUser.equals("")
                && !dsPassword.equals("") && !dsDatabase.equals("")) {
            try {
                MyOwnHashMap conf = new MyOwnHashMap();
                MyOwnHashMapEntry entry = new MyOwnHashMapEntry();
                entry.setKey(PostgresConnector.DB_PROP_KEY);
                entry.setValue(dsDatabase);
                conf.getEntries().add(entry);
                entry = new MyOwnHashMapEntry();
                entry.setKey(PostgresConnector.PORT_PROP_KEY);
                entry.setValue(dsPort);
                conf.getEntries().add(entry);
                entry = new MyOwnHashMapEntry();
                entry.setKey(PostgresConnector.SERVER_PROP_KEY);
                entry.setValue(dsIPName);
                conf.getEntries().add(entry);
                entry = new MyOwnHashMapEntry();
                entry.setKey(PostgresConnector.USER_PROP_KEY);
                entry.setValue(dsUser);
                conf.getEntries().add(entry);
                entry = new MyOwnHashMapEntry();
                entry.setKey(PostgresConnector.PASS_PROP_KEY);
                entry.setValue(dsPassword);
                conf.getEntries().add(entry);

                //            PostgresConnector connector = new PostgresConnector(conf);
                List<Table> tables = null;
                //            try {
                //                tables = connector.allTables();
                //            } catch (com.gazoomobile.mfw.connector.ConnectorException ex) {
                //                Logger.getLogger(PostgresDataSourceView.class.getName()).log(Level.SEVERE, null, ex);
                //            }
                DatasourceWebService datasourceWebService = null;
                try {
                    datasourceWebService = new DatasourceWebServiceImpl(new URI(MainView.SERVER_URL + "DatasourceService?wsdl").toURL()).getDatasourceWebServiceImplPort();
                } catch (MalformedURLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(),"Connection error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(PostgresDataSourceView.class.getName()).log(Level.SEVERE, ex.toString());
                }
                tables = datasourceWebService.getAlldbTables(PostgresConnector.class.getName(), conf);
                Database database = new Database(dsDatabase, tables);
                ds = new Datasource();
                ds.setName(dsName);
                List<ConnectorDefinition> defs = new ArrayList<ConnectorDefinition>();
                Connector conn = new Connector();
                conn.setConnectorType(connectorType);
                // la propiedad db nos esta llegando
                List<MyOwnHashMapEntry> keys = conf.getEntries();
                for (MyOwnHashMapEntry obj : keys) {
                    ConnectorDefinition def = new ConnectorDefinition();
                    def.setValue(obj.getValue());
                    for (ConnectorProperty prop : connectorProperties) {
                        if (prop.getName().equals(obj.getKey())) {
                            def.setProperty(prop);
                            break;
                        }
                    }
                    defs.add(def);
                }
                conn.setDefinitions(defs);
                ds.setConnector(conn);
                // no está llegando ningún definition
                SQLCommandView commandView = new SQLCommandView(this, ds, database);
                commandView.setVisible(true);
                setVisible(false);
            } catch (URISyntaxException ex) {
                Logger.getLogger(PostgresDataSourceView.class.getName()).log(Level.SEVERE, ex.toString());
            }
        } else {
            if (dsName.equals("")) {
                mf_dsName.setForeground(new java.awt.Color(204, 0, 0));
            } else if (dsIPName.equals("")) {
                mf_ip.setForeground(new java.awt.Color(204, 0, 0));
            } else if (dsPort.equals("")) {
                mf_port.setForeground(new java.awt.Color(204, 0, 0));
            } else if (dsUser.equals("")) {
                mf_user.setForeground(new java.awt.Color(204, 0, 0));
            } else if (dsPassword.equals("")) {
                mf_password.setForeground(new java.awt.Color(204, 0, 0));
            }

        }
}//GEN-LAST:event_jButton1ActionPerformed

    public void setDataSource(String command, List<String> outputFields) {
        ds.setOutputFields(outputFields);
        Connector conn = ds.getConnector();
        ConnectorProperty cp = null;
        for (ConnectorProperty prop : connectorProperties) {
            if(prop.getName().equalsIgnoreCase("sql")) {
                cp = prop;
                break;
            }
        }
        ConnectorDefinition def = new ConnectorDefinition();
        def.setProperty(cp);
        def.setValue(command);
        conn.getDefinitions().add(def);
        owner.addDataSourceChildNode(ds);
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void userNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField databaseField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel mf_database;
    private javax.swing.JLabel mf_dsName;
    private javax.swing.JLabel mf_ip;
    private javax.swing.JLabel mf_password;
    private javax.swing.JLabel mf_password1;
    private javax.swing.JLabel mf_port;
    private javax.swing.JLabel mf_user;
    private javax.swing.JTextField nameDSField;
    private javax.swing.JTextField nameField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField portField;
    private javax.swing.JTextField userNameField;
    // End of variables declaration//GEN-END:variables
    private Datasource ds;
    private MainView owner;
    private ConnectorType connectorType;
    private List<ConnectorProperty> connectorProperties;
}
