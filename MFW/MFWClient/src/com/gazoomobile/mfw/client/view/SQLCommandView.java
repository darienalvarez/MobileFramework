/*
 * To change this temp

public Component getTableCellRendererComponent(JTable tableSelected, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
throw new UnsupportedOperationException("Not supported yet.");
}
}ate, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SQLCommandView.java
 *
 * Created on 30-may-2010, 12:11:08
 */
package com.gazoomobile.mfw.client.view;
import com.gazoomobile.mfw.connector.db.Table;
import com.gazoomobile.mfw.platform.client.Datasource;
import java.awt.event.ComponentEvent;
import java.awt.Component;
import java.awt.event.ComponentListener;
import java.awt.event.ItemEvent;
import com.gazoomobile.mfw.client.database.Database;
import java.awt.event.ItemListener;
import java.beans.PropertyVetoException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JInternalFrame;
import javax.swing.table.DefaultTableModel;
import com.gazoomobile.mfw.client.interfaces.ISqlCommand;
import com.gazoomobile.mfw.connector.db.AssociationColumn;
import com.gazoomobile.mfw.connector.db.Column;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;

public class SQLCommandView extends javax.swing.JFrame implements ItemListener, ComponentListener {

    /** Creates new form SQLCommandView */
    public SQLCommandView(ISqlCommand listener, Datasource dataSource, Database database) {
        this.sqlCommand = "";
        this.dataSource = dataSource;
        this.listener = listener;
        this.database = database;
        initComponents();
        hideComponent();
        loadTableList();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel10 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        edit_sqlcommand_table_panel = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tables_list = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        datasource_label = new javax.swing.JLabel();
        host_label = new javax.swing.JLabel();
        database_label = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tables_panel = new javax.swing.JPanel();
        selection_table_panel = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        condition_container = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        condition = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        table_attValue1 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        operator = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        table_attValue2 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        value1_bt_criteria = new javax.swing.JTextField();
        andLabel = new javax.swing.JLabel();
        value2_bt_criteria = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        selection_table = new javax.swing.JTable();
        jPanel22 = new javax.swing.JPanel();
        table_attValue3_sel = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        aggregate_sel = new javax.swing.JLabel();
        grouping_sel = new javax.swing.JLabel();
        grp_sel = new javax.swing.JComboBox();
        agg_sel = new javax.swing.JComboBox();
        add_sel_btn = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        table_attValue3_GP = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        operator1_gc = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        table_attValue4_GP = new javax.swing.JComboBox();
        jButton4 = new javax.swing.JButton();
        operator2_gc = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        condition_gc = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        sortOrderButton = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        outputFields_sort = new javax.swing.JList();
        jPanel19 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        sortedFieldList = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        sortOrderList = new javax.swing.JList();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton6 = new javax.swing.JButton();

        jMenuItem1.setText("Add Condition");
        jPopupMenu1.add(jMenuItem1);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel16.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setText("Sortied Fields");
        jPanel16.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 2, -1, -1));

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel17.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel12.setText("Sortied Fields");
        jPanel17.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 2, -1, -1));

        jPanel16.add(jPanel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 10, 170, 19));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tables_list.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tables_list.setFont(new java.awt.Font("Tahoma", 0, 10));
        tables_list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tables_listMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tables_list);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 170, 580));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel4.setFocusable(false);
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        datasource_label.setText("DataSource: ");
        jPanel4.add(datasource_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 6, -1, -1));

        host_label.setText("Host: ");
        jPanel4.add(host_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 25, -1, -1));

        database_label.setText("Database: ");
        jPanel4.add(database_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 42, -1, -1));

        jLabel8.setText("Tables: ");
        jPanel4.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 60, -1, -1));

        jPanel3.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 170, 80));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 11, 170, 660));

        tables_panel.setBackground(new java.awt.Color(255, 255, 255));
        tables_panel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        javax.swing.GroupLayout tables_panelLayout = new javax.swing.GroupLayout(tables_panel);
        tables_panel.setLayout(tables_panelLayout);
        tables_panelLayout.setHorizontalGroup(
            tables_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 828, Short.MAX_VALUE)
        );
        tables_panelLayout.setVerticalGroup(
            tables_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 448, Short.MAX_VALUE)
        );

        jPanel1.add(tables_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(171, 11, 840, 460));

        selection_table_panel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        selection_table_panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selection_table_panelMouseClicked(evt);
            }
        });

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        condition_container.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        condition_container.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        condition.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        condition.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Table.Attrubute|Value", "Operator", "Table.Attribute|Value"
            }
        ));
        jScrollPane4.setViewportView(condition);

        condition_container.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 590, 140));

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel13.add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 170, 80, -1));

        jLabel2.setText("Operator");
        jPanel13.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 180, -1, -1));

        jLabel3.setText("Table.attribute 1| Value");
        jPanel13.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 6, -1, -1));

        table_attValue1.setEditable(true);
        table_attValue1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                table_attValue1ActionPerformed(evt);
            }
        });
        jPanel13.add(table_attValue1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 24, 140, 18));

        jLabel9.setText("Operator");
        jPanel13.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 53, -1, -1));

        operator.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=", "<>", ">", "<", ">=", "<=", "~", "~*", "!~", "!~*", "LIKE", "NOT LIKE", "ILIKE", "NOT ILIKE", "IN", "NOT IN", "BETWEEN", "NOT BETWEEN", "IS NULL", "IS NOT NULL", " ", " ", " " }));
        operator.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                operatorItemStateChanged(evt);
            }
        });
        operator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operatorActionPerformed(evt);
            }
        });
        jPanel13.add(operator, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 71, 140, 18));

        jLabel6.setText("Table.attribute 2 | Value");
        jPanel13.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        table_attValue2.setEditable(true);
        table_attValue2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                table_attValue2ActionPerformed(evt);
            }
        });
        table_attValue2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                table_attValue2KeyPressed(evt);
            }
        });
        jPanel13.add(table_attValue2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 117, 140, 18));

        jButton2.setText("Add");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jPanel13.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 116, 60, 20));
        jPanel13.add(value1_bt_criteria, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 116, 50, -1));

        andLabel.setText("AND");
        jPanel13.add(andLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 120, -1, -1));
        jPanel13.add(value2_bt_criteria, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 116, 60, -1));

        condition_container.add(jPanel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 228, 143));

        jPanel5.add(condition_container, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 145));

        selection_table_panel.addTab("Criteria", jPanel5);

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel21.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        selection_table.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        selection_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Output Field", "Aggregate", "Grouping"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(selection_table);

        jPanel21.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 0, 640, 140));

        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel22.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table_attValue3_sel.setEditable(true);
        table_attValue3_sel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                table_attValue3_selActionPerformed(evt);
            }
        });
        jPanel22.add(table_attValue3_sel, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 24, 154, 18));

        jLabel18.setText("Output Field");
        jPanel22.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, -1));

        aggregate_sel.setText("Aggregate");
        jPanel22.add(aggregate_sel, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 50, -1, -1));

        grouping_sel.setText("Grouping");
        jPanel22.add(grouping_sel, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, -1, -1));

        grp_sel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "<none>" }));
        grp_sel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grp_selActionPerformed(evt);
            }
        });
        jPanel22.add(grp_sel, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, 70, 18));

        agg_sel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AVG", "COUNT", "MAX", "MIN", "SUM", "<none>" }));
        agg_sel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                agg_selItemStateChanged(evt);
            }
        });
        agg_sel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agg_selActionPerformed(evt);
            }
        });
        jPanel22.add(agg_sel, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 70, 70, 18));

        add_sel_btn.setText("Add");
        add_sel_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                add_sel_btnMouseClicked(evt);
            }
        });
        jPanel22.add(add_sel_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(96, 94, 62, 19));

        jPanel21.add(jPanel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 178, 140));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, 823, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
        );

        selection_table_panel.addTab("Selection", jPanel6);

        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel15.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel15.add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 170, 80, -1));

        jLabel4.setText("Operator");
        jPanel15.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 180, -1, -1));

        jLabel5.setText("Table.attribute 1");
        jPanel15.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 57, -1, -1));

        table_attValue3_GP.setEditable(true);
        table_attValue3_GP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                table_attValue3_GPActionPerformed(evt);
            }
        });
        jPanel15.add(table_attValue3_GP, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 75, 140, 18));

        jLabel13.setText("Operator");
        jPanel15.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        operator1_gc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AVG", "COUNT", "MAX", "MIN", "SUM" }));
        operator1_gc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operator1_gcActionPerformed(evt);
            }
        });
        jPanel15.add(operator1_gc, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 140, 18));

        jLabel14.setText("Table.attribute 2");
        jPanel15.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 57, -1, -1));

        table_attValue4_GP.setEditable(true);
        jPanel15.add(table_attValue4_GP, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 75, 140, 18));

        jButton4.setText("Add");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jPanel15.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 100, 60, 20));

        operator2_gc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AVG", "COUNT", "MAX", "MIN", "SUM" }));
        operator2_gc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operator2_gcActionPerformed(evt);
            }
        });
        jPanel15.add(operator2_gc, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 140, 18));

        jLabel15.setText("Operator");
        jPanel15.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, -1, -1));

        jLabel1.setText("=");
        jPanel15.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, -1, -1));

        jPanel7.add(jPanel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 347, 143));

        condition_gc.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        condition_gc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Operator", "Table.Attrubute", "=", "Operator", "Table.Attrubute"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(condition_gc);

        jPanel7.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 0, 470, 140));

        selection_table_panel.addTab("Grouping criteria", jPanel7);

        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel14.setMinimumSize(new java.awt.Dimension(770, 120));
        jPanel14.setPreferredSize(new java.awt.Dimension(770, 120));
        jPanel14.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText(">>");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jPanel14.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 60, -1, -1));

        sortOrderButton.setText("A-Z");
        sortOrderButton.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        sortOrderButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sortOrderButtonMouseClicked(evt);
            }
        });
        jPanel14.add(sortOrderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 14, -1, 20));

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder("Output Fields"));

        outputFields_sort.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane5.setViewportView(outputFields_sort);

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
        );

        jPanel14.add(jPanel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 250, 110));

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel19.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sortedFieldList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sortedFieldListMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(sortedFieldList);

        jPanel19.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 210, 80));

        sortOrderList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sortOrderListMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(sortOrderList);

        jPanel19.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 220, 80));

        jPanel14.add(jPanel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 36, 430, 80));

        jLabel16.setText("Sorted Fields");
        jPanel14.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 20, -1, -1));

        jLabel17.setText("Sort Order");
        jPanel14.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, -1, -1));

        jPanel8.add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 140));

        selection_table_panel.addTab("Sorting", jPanel8);

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 811, Short.MAX_VALUE)
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        selection_table_panel.addTab("DML", jPanel20);

        jPanel1.add(selection_table_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 473, 830, 170));

        jButton6.setText("Done");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 650, -1, -1));

        edit_sqlcommand_table_panel.addTab("Design Query", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(edit_sqlcommand_table_panel, javax.swing.GroupLayout.DEFAULT_SIZE, 1020, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(edit_sqlcommand_table_panel, javax.swing.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void tables_listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tables_listMouseClicked
        String tableSelected = tables_list.getSelectedValue().toString();
        if (!isActiveTable(tableSelected)) {
            Table table = this.database.getTableByName(tableSelected);
            JInternalFrame tableInternaFrame = new JInternalFrame();
            tableInternaFrame.setTitle(tableSelected);
            tableInternaFrame.setBounds(30, 30, 130, 120);
            tableInternaFrame.setVisible(true);
            tableInternaFrame.getContentPane().setLayout(new BoxLayout(tableInternaFrame.getContentPane(), BoxLayout.Y_AXIS));
            tableInternaFrame.setAlignmentY(Component.TOP_ALIGNMENT);
            tableInternaFrame.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gazoomobile/mfw/client/images/table_internal.png")));
            try {
                tableInternaFrame.setSelected(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(SQLCommandView.class.getName()).log(Level.SEVERE, null, ex);
            }
            ArrayList<Column> attributes = (ArrayList<Column>) table.getColumns();
            for (int k = 0; k < attributes.size(); k++) {
                Column attribute = attributes.get(k);
                MyAttributeCheckBox attCheckbox;
                if (attribute instanceof AssociationColumn) {
                    attCheckbox = new MyAttributeCheckBox(attribute.getColumnName() + "(FK)", table);
                } else {
                    attCheckbox = new MyAttributeCheckBox(attribute.getColumnName(), table);
                }
                attCheckbox.addItemListener(this);
                tableInternaFrame.add(attCheckbox);
                tableInternaFrame.revalidate();
                tableInternaFrame.repaint();
            }
            activeDiagramTables.add(tableInternaFrame);
            tables_panel.add(tableInternaFrame);
            tableInternaFrame.addComponentListener(this);
        }
    }//GEN-LAST:event_tables_listMouseClicked

    private void operatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operatorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_operatorActionPerformed

    private void table_attValue1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_table_attValue1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_table_attValue1ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        String value1 = table_attValue1.getItemAt(table_attValue1.getSelectedIndex()).toString();
        String value2 = table_attValue2.getItemAt(table_attValue2.getSelectedIndex()).toString();
        String opr = operator.getItemAt(operator.getSelectedIndex()).toString();
        Vector<String> data = null;
        if (operator.getItemAt(operator.getSelectedIndex()).toString().equals("IS NULL") || operator.getItemAt(operator.getSelectedIndex()).toString().equals("IS NOT NULL")) {
            if (value1 != null && opr != null) {
                DefaultTableModel tableModel = (DefaultTableModel) condition.getModel();
                data = new Vector<String>();
                data.add(value1);
                data.add(opr);
                tableModel.addRow(data);
                condition.setModel(tableModel);
                where.add(value1 + " " + opr);
            }
        } else if (operator.getItemAt(operator.getSelectedIndex()).toString().equals("BETWEEN") || operator.getItemAt(operator.getSelectedIndex()).toString().equals("NOT BETWEEN")) {
            String betweenValues = value1_bt_criteria.getText() + " AND " + value2_bt_criteria.getText();
            DefaultTableModel tableModel = (DefaultTableModel) condition.getModel();
            data = new Vector<String>();
            data.add(value1);
            data.add(opr);
            data.add(betweenValues);
            tableModel.addRow(data);
            condition.setModel(tableModel);
            where.add(value1 + " " + opr + " " + betweenValues);
        } else {
            if (value1 != null && value2 != null) {
                DefaultTableModel tableModel = (DefaultTableModel) condition.getModel();
                data = new Vector<String>();
                data.add(value1);
                data.add(opr);
                data.add(value2);
                tableModel.addRow(data);
                condition.setModel(tableModel);
                where.add(value1 + " " + opr + " " + value2);
            }
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void sortOrderButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sortOrderButtonMouseClicked
        if (sortOrderList.getSelectedValue() != null && sortedFieldList.getSelectedValue() != null) {
            if (sortOrderButton.getText().equals("A-Z")) {
                sortOrderButton.setText("Z-A");
                String attSelected = sortedFieldList.getSelectedValue().toString();
                sortedFields.put(attSelected, "Desc");
            } else {
                sortOrderButton.setText("A-Z");
                String attSelected = sortedFieldList.getSelectedValue().toString();
                sortedFields.put(attSelected, "Asc");
            }
            DefaultListModel sortOrderListModel = new DefaultListModel();
            Enumeration<String> attributes = sortedFields.keys();
            while (attributes.hasMoreElements()) {
                String currentAtt = attributes.nextElement();
                sortOrderListModel.addElement(sortedFields.get(currentAtt));
            }
            sortOrderList.setModel(sortOrderListModel);
            sortOrderList.setSelectedIndex(sortedFieldList.getSelectedIndex());
        }
    }//GEN-LAST:event_sortOrderButtonMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        DefaultListModel sortedListModel = new DefaultListModel();
        DefaultListModel sortOrderListModel = new DefaultListModel();

        String outputFieldSort = (String) outputFields_sort.getSelectedValue();
        sortedFields = new Hashtable<String, String>();
        sortedFields.put(outputFieldSort, "Asc");

        Enumeration<String> attributes = sortedFields.keys();
        while (attributes.hasMoreElements()) {
            String currentAtt = attributes.nextElement();
            sortedListModel.addElement(currentAtt);
            sortOrderListModel.addElement(sortedFields.get(currentAtt));
        }
        sortedFieldList.setModel(sortedListModel);
        sortOrderList.setModel(sortOrderListModel);
    }//GEN-LAST:event_jButton1MouseClicked

    private void table_attValue3_GPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_table_attValue3_GPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_table_attValue3_GPActionPerformed

    private void operator1_gcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operator1_gcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_operator1_gcActionPerformed

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        DefaultTableModel tableConditionGC = (DefaultTableModel) condition_gc.getModel();
        Vector<String> data = new Vector<String>();
        String opr1_gc = operator1_gc.getItemAt(operator1_gc.getSelectedIndex()).toString();
        String value = table_attValue3_GP.getItemAt(table_attValue3_GP.getSelectedIndex()).toString();
        String opr2_gc = operator2_gc.getItemAt(operator2_gc.getSelectedIndex()).toString();
        String value1 = table_attValue4_GP.getItemAt(table_attValue4_GP.getSelectedIndex()).toString();
        if ((value == null ? "--select--" != null : !value.equals("--select--")) && (value1 == null ? "--select--" != null : !value1.equals("--select--"))) {
            data.add(opr1_gc);
            data.add("(" + value + ")");
            data.add("=");
            data.add(opr2_gc);
            data.add("(" + value1 + ")");
            tableConditionGC.addRow(data);
            condition_gc.setModel(tableConditionGC);
            having.add(opr1_gc + "( " + value + " )" + " = " + opr2_gc + "( " + value1 + " )");
        }
    }//GEN-LAST:event_jButton4MouseClicked

    private void operator2_gcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operator2_gcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_operator2_gcActionPerformed

    private void table_attValue3_selActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_table_attValue3_selActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_table_attValue3_selActionPerformed

    private void agg_selActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agg_selActionPerformed
        String aggregate = agg_sel.getItemAt(agg_sel.getSelectedIndex()).toString();
        if (!aggregate.equals("<none>")) {
            String outputField = (String) table_attValue3_sel.getItemAt(table_attValue3_sel.getSelectedIndex());
            if (outputField != null) {
                Vector<String> data = new Vector<String>();
                data.add(outputField);
                data.add(aggregate);
                data.add(" ");
                DefaultTableModel tableModel = (DefaultTableModel) selection_table.getModel();
                tableModel.addRow(data);
                selection_table.setModel(tableModel);
            }
            String table = getTableByAttributeTable(outputField);
            String column = getAttributeByAttributeTable(outputField);
            unCheckedOutputField(table, column);
            aggregateHash.put(aggregate, outputField);
            updateOutputFieldslist(outputField);
            grp_sel.setEnabled(false);
            grouping_sel.setEnabled(false);
            add_sel_btn.setEnabled(false);
        } else {
            grp_sel.setEnabled(true);
            grouping_sel.setEnabled(true);
            add_sel_btn.setEnabled(true);
        }
    }//GEN-LAST:event_agg_selActionPerformed

    private void grp_selActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grp_selActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_grp_selActionPerformed

    private void add_sel_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add_sel_btnMouseClicked
        String outputField = (String) table_attValue3_sel.getItemAt(table_attValue3_sel.getSelectedIndex());
        String aggregate = agg_sel.getItemAt(agg_sel.getSelectedIndex()).toString();
        String grouping = grp_sel.getItemAt(grp_sel.getSelectedIndex()).toString();
        if (aggregate == null ? "<none>" != null : !aggregate.equals("<none>")) {
            if (outputField != null) {
                Vector<String> data = new Vector<String>();
                data.add(outputField);
                data.add(aggregate);
                data.add(" ");
                DefaultTableModel tableModel = (DefaultTableModel) selection_table.getModel();
                tableModel.addRow(data);
                selection_table.setModel(tableModel);
            }
        } else {
            if (outputField != null && (grouping == null ? "<none>" != null : !grouping.equals("<none>"))) {
                Vector<String> data = new Vector<String>();
                data.add(outputField);
                data.add(" ");
                data.add(grouping);
                groupBy.add(outputField);
                DefaultTableModel tableModel = (DefaultTableModel) selection_table.getModel();
                tableModel.addRow(data);
                selection_table.setModel(tableModel);
            }
        }
    }//GEN-LAST:event_add_sel_btnMouseClicked

    private void selection_table_panelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selection_table_panelMouseClicked
        sqlCommand = selectBlock() + fromBlock() + whereBlock() + groupByBlock() + havingBlock() + orderBlock();
        jTextArea1.setText(sqlCommand);
    }//GEN-LAST:event_selection_table_panelMouseClicked

    private void operatorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_operatorItemStateChanged
        if (operator.getItemAt(operator.getSelectedIndex()).toString().equals("IS NULL") || operator.getItemAt(operator.getSelectedIndex()).toString().equals("IS NOT NULL")) {
            if (jLabel6.getText().equals("AND")) {
                jLabel6.setText("Table.attribute 2 | Value");
            }
            jLabel6.setEnabled(false);
            table_attValue2.setVisible(true);
            table_attValue2.setEnabled(false);
        } else if (operator.getItemAt(operator.getSelectedIndex()).toString().equals("BETWEEN") || operator.getItemAt(operator.getSelectedIndex()).toString().equals("NOT BETWEEN")) {
            jLabel6.setVisible(false);
            table_attValue2.setVisible(false);
            value1_bt_criteria.setVisible(true);
            value2_bt_criteria.setVisible(true);
            andLabel.setVisible(true);
        } else {
            if (jLabel6.getText().equals("AND")) {
                jLabel6.setText("Table.attribute 2 | Value");
            }
            jLabel6.setEnabled(true);
            table_attValue2.setVisible(true);
            table_attValue2.setEnabled(true);
            hideComponent();
        }
    }//GEN-LAST:event_operatorItemStateChanged

    private void table_attValue2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_table_attValue2ActionPerformed
    }//GEN-LAST:event_table_attValue2ActionPerformed

    private void table_attValue2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_table_attValue2KeyPressed
    }//GEN-LAST:event_table_attValue2KeyPressed

    private void sortedFieldListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sortedFieldListMouseClicked
        sortOrderList.setSelectedIndex(sortedFieldList.getSelectedIndex());
        if (sortedFieldList.getSelectedValue().equals("Desc")) {
            sortOrderButton.setText("Z-A");
        } else if (sortedFieldList.getSelectedValue().equals("Asc")) {
            sortOrderButton.setText("A-Z");
        }
    }//GEN-LAST:event_sortedFieldListMouseClicked

    private void sortOrderListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sortOrderListMouseClicked
        sortedFieldList.setSelectedIndex(sortOrderList.getSelectedIndex());
        if (sortOrderList.getSelectedValue().equals("Desc")) {
            sortOrderButton.setText("Z-A");
        } else if (sortOrderList.getSelectedValue().equals("Asc")) {
            sortOrderButton.setText("A-Z");
        }
    }//GEN-LAST:event_sortOrderListMouseClicked

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        listener.setSQLCommand(sqlCommand);
    }//GEN-LAST:event_jButton6MouseClicked

    private void agg_selItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_agg_selItemStateChanged
        
    }//GEN-LAST:event_agg_selItemStateChanged

    public void itemStateChanged(ItemEvent e) {
        Table tableSelected = ((MyAttributeCheckBox) e.getItem()).getTable();
        Column colSelected = null; //tableSelected.getColumnByName(removePK(((MyAttributeCheckBox) e.getItem()).getText()));
        if (e.getStateChange() == ItemEvent.SELECTED) {
            selectFromHash.put(tableSelected.getName() + "." + colSelected.getColumnName(), tableSelected.getName());
            table_attValue1.addItem(tableSelected.getName() + "." + colSelected.getColumnName());
            table_attValue2.addItem(tableSelected.getName() + "." + colSelected.getColumnName());
            table_attValue3_GP.addItem(tableSelected.getName() + "." + colSelected.getColumnName());
            table_attValue4_GP.addItem(tableSelected.getName() + "." + colSelected.getColumnName());
            DefaultListModel defaultListModel = new DefaultListModel();
            Enumeration<String> att = selectFromHash.keys();
            while (att.hasMoreElements()) {
                String temp = att.nextElement();
                defaultListModel.addElement(temp);
            }
            outputFields_sort.setModel(defaultListModel);
            table_attValue3_sel.addItem(tableSelected.getName() + "." + colSelected.getColumnName());
            if (colSelected instanceof AssociationColumn && isActiveTable(((AssociationColumn) colSelected).getAssociationTable())) {
                DefaultTableModel tableModel = (DefaultTableModel) condition.getModel();
                Vector<String> data = new Vector<String>();
                data.add(tableSelected.getName() + "." + colSelected.getColumnName());
                data.add("=");
                data.add(((AssociationColumn) colSelected).getAssociationTable() + "." + colSelected.getColumnName());
                tableModel.addRow(data);
                condition.setModel(tableModel);
                where.add(tableSelected.getName() + "." + colSelected.getColumnName() + "=" + ((AssociationColumn) colSelected).getColumnName() + "." + colSelected.getColumnName());
            }
        }
    }

    public boolean isActiveTable(String tableName) {
        for (int i = 0; i < activeDiagramTables.size(); i++) {
            if (activeDiagramTables.get(i).getTitle().equals(tableName)) {
                return true;
            }
        }
        return false;
    }

    public void hideComponent() {
        value1_bt_criteria.setVisible(false);
        value2_bt_criteria.setVisible(false);
        andLabel.setVisible(false);
    }

    public JInternalFrame getInternalFrameByName(Vector<JInternalFrame> internalTablesFrames, String name) {
        for (int i = 0; i < internalTablesFrames.size(); i++) {
            if (internalTablesFrames.elementAt(i).getTitle().equals(name)) {
                return internalTablesFrames.elementAt(i);
            }
        }
        return null;
    }

    public void loadTableList() {
        DefaultListModel listModel = new DefaultListModel();
        for (int i = 0; i < this.database.getTables().size(); i++) {
            Table tables = database.getTables().get(i);
            listModel.addElement(tables.getName());
        }
        tables_list.setModel(listModel);
    }

    public String getAttributeByAttributeTable(String attributeTable) {
        String attribute = "";
        for (int i = 0; i < attributeTable.length(); i++) {
            if (attributeTable.charAt(i) == '.') {
                for (int j = i + 1; j < attributeTable.length(); j++) {
                    attribute += attributeTable.charAt(j);
                }
            }
        }
        return attribute;
    }

    public String getTableByAttributeTable(String attributeTable) {
        String table = new String("");
        int index = 0;
        while (attributeTable.charAt(index) != '.' && index < attributeTable.length()) {
            table += attributeTable.charAt(index);
            index++;
        }
        return table;
    }

    public void unCheckedOutputField(String table, String column) {
        column = removePK(column);
        Component[] components = tables_panel.getComponents();
        for (int i = 0; i < components.length; i++) {
            if (components[i] instanceof JInternalFrame && ((JInternalFrame) components[i]).getTitle().equals(table)) {
                Component[] jInternalFrameComponents = ((JInternalFrame) components[i]).getContentPane().getComponents();
                for (int j = 0; j < jInternalFrameComponents.length; j++) {
                    if (jInternalFrameComponents[j] instanceof MyAttributeCheckBox && ((MyAttributeCheckBox) jInternalFrameComponents[j]).getText().equals(column)) {
                        ((MyAttributeCheckBox) jInternalFrameComponents[j]).setSelected(false);
                    }
                }
            }
        }
    }

    public void checkedFKAttribute(String column, String table){
        
    }

    public void updateOutputFieldslist(String outputField) {
        DefaultListModel listModel = new DefaultListModel();
        for (int i = 0; i < selectFromHash.size(); i++) {
            table_attValue1.removeItemAt(i);
            table_attValue2.removeItemAt(i);
            table_attValue3_sel.removeItemAt(i);
            table_attValue3_GP.removeItemAt(i);
            table_attValue4_GP.removeItemAt(i);
            if (!isAttributeAggregate(outputField)) {
                listModel.addElement(outputField);
            }
        }
        outputFields_sort.setModel(listModel);
    }

    public boolean isAttributeSelected(String attribute){
        return selectFromHash.contains(attribute);
    }

    public boolean isAttributeAggregate(String attribute){
        return aggregateHash.contains(attribute);
    }

    public String selectBlock() {
        String query = new String("SELECT ");
        if (aggregateHash.size() > 0) {
            Enumeration<String> aggregateKey = aggregateHash.keys();
            if (aggregateHash.size() == 1) {
                String currentAggregateKey = aggregateKey.nextElement();
                query += currentAggregateKey + "( " + aggregateHash.get(currentAggregateKey) + " ), ";
            } else {
                while (aggregateKey.hasMoreElements()) {
                    String currentAggregateKey = aggregateKey.nextElement();
                    query += currentAggregateKey + "( " + aggregateHash.get(currentAggregateKey) + " ), ";
                }
            }
        }
        if (selectFromHash.size() > 0) {
            Enumeration<String> attKeys = selectFromHash.keys();
            while (attKeys.hasMoreElements()) {
                String current = attKeys.nextElement();
                if(!isAttributeAggregate(current))
                    query += current + ", ";
            }
            query = removeComma(query) + " ";
        }
        else
            query = removeComma(query);
        return query;
    }

    public String fromBlock() {
        String query = new String(" ");
        if (selectFromHash.size() > 0) {
            query = " FROM ";
            Iterator<String> tbValues = selectFromHash.values().iterator();
            ArrayList<String> tempList = new ArrayList<String>();
            while (tbValues.hasNext()) {
                String current = tbValues.next();
                boolean flag = false;
                if (tempList.size() > 0) {
                    for (int i = 0; i < tempList.size(); i++) {
                        if (tempList.get(i).equals(current)) {
                            flag = true;
                            break;
                        }
                    }
                    if (!flag) {
                        tempList.add(current);
                    }
                } else {
                    tempList.add(current);
                }
            }
            Iterator<String> tbValues1 = tempList.iterator();
            while (tbValues1.hasNext()) {
                String current = tbValues1.next();
                query += current + ", ";
            }
            query = removeComma(query) + " ";
        }
        return query;
    }

    public String whereBlock() {
        String query = new String(" ");
        if (where.size() > 0) {
            query = " WHERE ";
            Iterator<String> condItr = where.iterator();
            while (condItr.hasNext()) {
                String current = condItr.next();
                query += current + " AND ";
            }
            query = removeAND(query);
            return query + " ";
        }
        return query;
    }

    public String groupByBlock() {
        String query = new String(" ");
        if (groupBy.size() > 0) {
            query = " GROUP BY ";
            Iterator<String> groupByItr = groupBy.iterator();
            while (groupByItr.hasNext()) {
                String current = groupByItr.next();
                query += current + " AND ";
            }
            query = removeAND(query);
            return query + "";
        }
        return query;
    }

    public String havingBlock() {
        String query = new String(" ");
        if (having.size() > 0) {
            query = "HAVING ";
            Iterator<String> havingItr = having.iterator();
            while (havingItr.hasNext()) {
                String current = havingItr.next();
                query += current + " AND ";
            }
            query = removeAND(query);
            return query + " ";
        }
        return query;
    }

    public String orderBlock() {
        String query = new String(" ");
        if (sortedFields.size() > 0) {
            query = "ORDER BY ";
            Enumeration<String> sortedCol = sortedFields.keys();
            while (sortedCol.hasMoreElements()) {
                String currentKey = sortedCol.nextElement();
                query += currentKey + " " + sortedFields.get(currentKey) + " ";
            }
        }
        return query;
    }

    public String removeComma(String data) {
        return data = data.substring(0, data.length() - 2);
    }

    public String removeAND(String data) {
        return data = data.substring(0, data.length() - 4);
    }

    public String removePK(String string) {
        if (string.contains("(FK)"))
            return string.substring(0, string.length() - 4);
        return string;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_sel_btn;
    private javax.swing.JComboBox agg_sel;
    private javax.swing.JLabel aggregate_sel;
    private javax.swing.JLabel andLabel;
    private javax.swing.JTable condition;
    private javax.swing.JPanel condition_container;
    private javax.swing.JTable condition_gc;
    private javax.swing.JLabel database_label;
    private javax.swing.JLabel datasource_label;
    private javax.swing.JTabbedPane edit_sqlcommand_table_panel;
    private javax.swing.JLabel grouping_sel;
    private javax.swing.JComboBox grp_sel;
    private javax.swing.JLabel host_label;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JComboBox operator;
    private javax.swing.JComboBox operator1_gc;
    private javax.swing.JComboBox operator2_gc;
    private javax.swing.JList outputFields_sort;
    private javax.swing.JTable selection_table;
    private javax.swing.JTabbedPane selection_table_panel;
    private javax.swing.JButton sortOrderButton;
    private javax.swing.JList sortOrderList;
    private javax.swing.JList sortedFieldList;
    private javax.swing.JComboBox table_attValue1;
    private javax.swing.JComboBox table_attValue2;
    private javax.swing.JComboBox table_attValue3_GP;
    private javax.swing.JComboBox table_attValue3_sel;
    private javax.swing.JComboBox table_attValue4_GP;
    private javax.swing.JList tables_list;
    private javax.swing.JPanel tables_panel;
    private javax.swing.JTextField value1_bt_criteria;
    private javax.swing.JTextField value2_bt_criteria;
    // End of variables declaration//GEN-END:variables

    private ISqlCommand listener;
    private Datasource dataSource;
    private ArrayList<JInternalFrame> activeDiagramTables = new ArrayList<JInternalFrame>();
    private Hashtable<String, String> selectFromHash = new Hashtable<String, String>();
    private ArrayList<String> where = new ArrayList<String>();
    private ArrayList<String> having = new ArrayList<String>();
    private ArrayList<String> groupBy = new ArrayList<String>();
    private Hashtable<String, String> sortedFields = new Hashtable<String, String>();
    private Hashtable<String, String> aggregateHash = new Hashtable<String, String>();
    private String sqlCommand;
    private Database database;

    public void componentResized(ComponentEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void componentMoved(ComponentEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void componentShown(ComponentEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void componentHidden(ComponentEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

}
